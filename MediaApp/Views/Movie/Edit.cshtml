@model MediaApp.Models.Movie

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_ModelIndexLayout.cshtml";
}

<h2 class="modelTitle">Edit<br/>Movie</h2>

@using (Html.BeginForm("Edit", "Movie", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group editForm">
            @Html.LabelFor(model => model.MovImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.MovImage != null)
                {
                    var imgData = "data:" + Model.MovImage.Type + ";base64," + Model.MovImage.Data;
                    <img class="movieImage" src=@imgData />
                } else if (Model.imgURL != null) {
                        <img class="movieImage" src=@Model.imgURL />
                }
                <div class="imageUploadContainer">
                    <p>Local File</p>
                    <input type="file" id="Image" name="ImageInput" class="image" />
                    <br />
                    <p>--or--</p>
                    <p>URL</p>
                    <input type="text" id="imgUrl" class="form-control" name="imgUrl"/>
                </div>
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Synopsis, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Synopsis, new {@class = "form-control" } )
                @Html.ValidationMessageFor(model => model.Synopsis, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Director, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Director.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Director.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Cast, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @for (int i = 0; i < Model.Cast.Count; i++)
                {
                    var castId = "Cast_" + @i + "__Name";
                    var castName = "Cast[" + @i + "].Name";

                    <!--TODO: Only displaying the first name for some reason. It doesn't like the space in the name.-->
                    string actor = Model.Cast[i].Name;
                    <input type="text" class="cast" id=@castId name=@castName value=@actor />
                    if (i < Model.Cast.Count - 1)
                    {
                        <br />
                    }
                }
                <input type="button" id="addCast" onclick="addcast()" value="Add Cast" />
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @for (int i = 0; i < Model.Genre.Count; i++)
                {
                    var genreId = "Genre_" + @i + "_";
                    var genreName = "Genre[" + @i + "]";

                    <input type="text" class="genre" id=@genreId name=@genreName value=@Model.Genre[i] />
                    if (i < Model.Genre.Count - 1)
                    {
                        <br />
                    }
                }
                <input type="button" id="addGenre" onclick="addgenre()" value="Add Genre" />
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group editForm">
            @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
            </div>
        </div>

        <input type="hidden" name="Order" value=@ViewBag.Order />
        <input type="hidden" name="Index" value=@ViewBag.Index />

        <div class="form-group editForm">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

